#!/usr/bin/env python3

import sys
import logging
import time

sys.path.insert( 1, '..')

from subcontractor.daemon import Daemon
from subcontractor.contractor import Contractor


class Main( Daemon ):
  default_config_file = '/etc/subcontractor.conf'

  def __init__( self, *args, **kwargs ):
    super().__init__( 'subcontractor', *args, **kwargs )
    self.contractor = None
    self.site = None
    self.cont = True
    self.handler = None

  def config( self, config ):
    self.site = config.get( 'subcontractor', 'site' )
    host = config.get( 'contractor', 'host' )
    root_path = config.get( 'contractor', 'root_path' )
    port = config.get( 'contractor', 'port' )
    proxy = config.get( 'contractor', 'proxy' )
    if not proxy:
      proxy = None

    self.contractor = Contractor( self.site, host=host, root_path=root_path, port=port, proxy=proxy )
    item = self.contractor.getSite()
    if item is None:
      raise ValueError( 'site "{0}" does not exist'.format( self.site ) )

    logging.info( 'working with site "{0}"({1})'.format( item[ 'description' ], item[ 'name' ] ) )

    self.poll_interval = config.getint( 'dhcpd', 'poll_interval' )

  def main( self ):
    logging.debug( 'running...' )
    while self.cont:
      dynamic_pool_list = self.contractor.getDHCPPools()
      static_mac_map = self.contractor.getStaticMAC()
      print( '--- dynamic pools ---')
      print( dynamic_pool_list )
      print( '--- static mac entries ---' )
      print( static_mac_map )
      logging.debug( 'sleeping for "{0}"...'.format( self.poll_interval ) )
      for _ in range( 0, self.poll_interval ):
        if not self.cont:
          break
        time.sleep( 1 )  # using time.sleep instead of a event.wait( timeout=? ) to avoid time warping problems

    logging.debug( 'done.' )

  def stop( self ):
    self.cont = False

if __name__ == '__main__':
  Main().run()
