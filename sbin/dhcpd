#!/usr/bin/env python3

import logging
import time

from subcontractor.daemon import Daemon
from subcontractor.contractor import Contractor
from subcontractor.dhcpd import DHCPd
from subcontractor.dynamic_pool import DynamicPool
from subcontractor.static_pool import StaticPool

# in seconds
STATIC_LEASE_TIME = 1800
DYNAMIC_LEASE_TIME = 300


class Main( Daemon ):
  default_config_file = '/etc/subcontractor.conf'

  def __init__( self, *args, **kwargs ):
    super().__init__( 'subcontractor', *args, **kwargs )
    self.contractor = None
    self.site = None
    self.cont = True
    self.handler = None
    self.dhcpd = None
    self.static_pool = StaticPool( STATIC_LEASE_TIME )

  def config( self, config ):
    self.site = config.get( 'subcontractor', 'site' )
    host = config.get( 'contractor', 'host' )
    root_path = config.get( 'contractor', 'root_path' )
    proxy = config.get( 'contractor', 'proxy', fallback=None )
    if not proxy:
      proxy = None

    self.contractor = Contractor( self.site, host=host, root_path=root_path, proxy=proxy )
    item = self.contractor.getSite()
    if item is None:
      raise ValueError( 'site "{0}" does not exist'.format( self.site ) )

    logging.info( 'working with site "{0}"({1})'.format( item[ 'description' ], item[ 'name' ] ) )

    self.poll_interval = config.getint( 'dhcpd', 'poll_interval' )
    self.listen_interface = config.get( 'dhcpd', 'listen_interface' )
    self.listen_address = config.get( 'dhcpd', 'listen_address' )
    self.tftp_server = config.get( 'dhcpd', 'tftp_server' )

  def main( self ):
    logging.debug( 'starting dhcp server...' )
    self.dhcpd = DHCPd( self.listen_interface, self.listen_address, self.tftp_server )
    self.dhcpd.add_pool( self.static_pool, 'static' )
    self.dhcpd.start()
    logging.debug( 'running...' )
    while self.cont:
      try:
        keep_name_list = []

        dynamic_pool_list = self.contractor.getDHCPdDynamidPools()
        static_map = self.contractor.getDHCPdStaticPools()
        for dynamic_pool in dynamic_pool_list:
          pool = DynamicPool( dynamic_pool[ 'gateway' ], dynamic_pool[ 'netmask' ], dynamic_pool[ 'dns_server' ], dynamic_pool[ 'domain_name' ], DYNAMIC_LEASE_TIME, dynamic_pool[ 'address_map' ] )
          self.dhcpd.add_pool( pool, dynamic_pool[ 'name' ] )
          keep_name_list.append( dynamic_pool[ 'name' ] )

        self.static_pool.update( static_map )
        keep_name_list.append( 'static' )

        self.dhcpd.clean_pool( keep_name_list )
        self.dhcpd.cleanup()

        logging.debug( 'sleeping for "{0}"...'.format( self.poll_interval ) )
        for _ in range( 0, self.poll_interval ):
          if not self.cont:
            break
          time.sleep( 1 )  # using time.sleep instead of a event.wait( timeout=? ) to avoid time warping problems

      except Exception:
        logging.exception( 'Exception occured during main loop' )
        self.dhcpd.stop()
        self.cont = False

    logging.debug( 'waiting for dhcp server...' )
    self.dhcpd.join()
    logging.debug( 'done.' )

  def stop( self ):
    self.cont = False
    if self.dhcpd is not None:
      self.dhcpd.stop()


if __name__ == '__main__':
  Main().run()
